{"ast":null,"code":"import \"core-js/modules/es.array.concat\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.map\";\nimport \"core-js/modules/es.object.assign\";\nimport _toConsumableArray from \"/Users/romanbogdanov/WebstormProjects/story-repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/Users/romanbogdanov/WebstormProjects/story-repo/src/components/TaskList.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Competitive from './Competitive';\nimport { connect } from 'react-redux';\nimport { archiveTask, pinTask } from '../lib/redux';\n\nfunction PureTaskList(_ref) {\n  var _this = this;\n\n  var loading = _ref.loading,\n      tasks = _ref.tasks,\n      onPinTask = _ref.onPinTask,\n      onArchiveTask = _ref.onArchiveTask;\n  var events = {\n    onPinTask: onPinTask,\n    onArchiveTask: onArchiveTask\n  };\n  var LoadingRow = /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glow-checkbox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"glow-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"Loading\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 30\n    }\n  }, \"cool\"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 48\n    }\n  }, \"state\")));\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow, LoadingRow);\n  }\n\n  if (tasks.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-items\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"wrapper-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"icon-check\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"title-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, \"You have no tasks\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"subtitle-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }\n    }, \"Sit back and relax\")));\n  }\n\n  var tasksInOrder = [].concat(_toConsumableArray(tasks.filter(function (t) {\n    return t.state === 'TASK_PINNED';\n  })), _toConsumableArray(tasks.filter(function (t) {\n    return t.state !== 'TASK_PINNED';\n  })));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, tasksInOrder.map(function (task) {\n    return /*#__PURE__*/React.createElement(Competitive, Object.assign({\n      key: task.id,\n      task: task\n    }, events, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }));\n  }));\n}\n\nPureTaskList.displayName = \"PureTaskList\";\nPureTaskList.propTypes = {\n  loading: PropTypes.bool,\n  tasks: PropTypes.arrayOf(Competitive.propTypes.task).isRequired,\n  onPinTask: PropTypes.func.isRequired,\n  onArchiveTask: PropTypes.func.isRequired\n};\nPureTaskList.defaultProps = {\n  loading: false\n};\nPureTaskList.__docgenInfo = {\n  \"description\": \"\",\n  \"methods\": [],\n  \"displayName\": \"PureTaskList\",\n  \"props\": {\n    \"loading\": {\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      },\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"\"\n    },\n    \"tasks\": {\n      \"type\": {\n        \"name\": \"arrayOf\",\n        \"value\": {\n          \"name\": \"custom\",\n          \"raw\": \"Competitive.propTypes.task\"\n        }\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onPinTask\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    },\n    \"onArchiveTask\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"\"\n    }\n  }\n};\nexport default connect(function (_ref2) {\n  var tasks = _ref2.tasks;\n  return {\n    tasks: tasks.filter(function (t) {\n      return t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED';\n    })\n  };\n}, function (dispatch) {\n  return {\n    onArchiveTask: function onArchiveTask(id) {\n      return dispatch(archiveTask(id));\n    },\n    onPinTask: function onPinTask(id) {\n      return dispatch(pinTask(id));\n    }\n  };\n})(PureTaskList);\n\nif (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") {\n  STORYBOOK_REACT_CLASSES[\"src/components/TaskList.js\"] = {\n    name: \"PureTaskList\",\n    docgenInfo: PureTaskList.__docgenInfo,\n    path: \"src/components/TaskList.js\"\n  };\n}","map":{"version":3,"sources":["/Users/romanbogdanov/WebstormProjects/story-repo/src/components/TaskList.js"],"names":["React","PropTypes","Competitive","connect","archiveTask","pinTask","PureTaskList","loading","tasks","onPinTask","onArchiveTask","events","LoadingRow","length","tasksInOrder","filter","t","state","map","task","id","propTypes","bool","arrayOf","isRequired","func","defaultProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Competitive from './Competitive';\nimport { connect } from 'react-redux';\nimport { archiveTask, pinTask } from '../lib/redux';\n\nfunction PureTaskList({ loading, tasks, onPinTask, onArchiveTask }) {\n    const events = {\n        onPinTask,\n        onArchiveTask,\n    };\n\n    const LoadingRow = (\n        <div className=\"loading-item\">\n            <span className=\"glow-checkbox\" />\n            <span className=\"glow-text\">\n        <span>Loading</span> <span>cool</span> <span>state</span>\n      </span>\n        </div>\n    );\n\n    if (loading) {\n        return (\n            <div className=\"list-items\">\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n                {LoadingRow}\n            </div>\n        );\n    }\n\n    if (tasks.length === 0) {\n        return (\n            <div className=\"list-items\">\n                <div className=\"wrapper-message\">\n                    <span className=\"icon-check\" />\n                    <div className=\"title-message\">You have no tasks</div>\n                    <div className=\"subtitle-message\">Sit back and relax</div>\n                </div>\n            </div>\n        );\n    }\n\n    const tasksInOrder = [\n        ...tasks.filter(t => t.state === 'TASK_PINNED'),\n        ...tasks.filter(t => t.state !== 'TASK_PINNED'),\n    ];\n\n    return (\n        <div className=\"list-items\">\n            {tasksInOrder.map(task => (\n                <Competitive key={task.id} task={task} {...events} />\n            ))}\n        </div>\n    );\n}\n\nPureTaskList.propTypes = {\n    loading: PropTypes.bool,\n    tasks: PropTypes.arrayOf(Competitive.propTypes.task).isRequired,\n    onPinTask: PropTypes.func.isRequired,\n    onArchiveTask: PropTypes.func.isRequired,\n};\n\nPureTaskList.defaultProps = {\n    loading: false,\n};\n\nexport default connect(\n    ({ tasks }) => ({\n        tasks: tasks.filter(t => t.state === 'TASK_INBOX' || t.state === 'TASK_PINNED'),\n    }),\n    dispatch => ({\n        onArchiveTask: id => dispatch(archiveTask(id)),\n        onPinTask: id => dispatch(pinTask(id)),\n    })\n)(PureTaskList);\n"]},"metadata":{},"sourceType":"module"}