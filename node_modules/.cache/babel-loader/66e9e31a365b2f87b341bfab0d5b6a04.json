{"ast":null,"code":"import\"core-js/modules/es.array.map\";import _objectSpread from\"/Users/romanbogdanov/WebstormProjects/story-repo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport{createStore}from\"redux\";// The actions are the \"names\" of the changes that can happen to the store\nexport var actions={ARCHIVE_TASK:\"ARCHIVE_TASK\",PIN_TASK:\"PIN_TASK\"};// The action creators bundle actions with the data required to execute them\nexport var archiveTask=function(id){return{type:actions.ARCHIVE_TASK,id:id}};export var pinTask=function(id){return{type:actions.PIN_TASK,id:id}};// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState){return function(state,action){return _objectSpread({},state,{tasks:state.tasks.map(function(task){return task.id===action.id?_objectSpread({},task,{state:taskState}):task})})}}// The reducer describes how the contents of the store change for each action\nexport var reducer=function(state,action){switch(action.type){case actions.ARCHIVE_TASK:return taskStateReducer(\"TASK_ARCHIVED\")(state,action);case actions.PIN_TASK:return taskStateReducer(\"TASK_PINNED\")(state,action);default:return state;}};// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nvar defaultTasks=[{id:\"1\",title:\"Something\",state:\"TASK_INBOX\"},{id:\"2\",title:\"Something more\",state:\"TASK_INBOX\"},{id:\"3\",title:\"Something else\",state:\"TASK_INBOX\"},{id:\"4\",title:\"Something again\",state:\"TASK_INBOX\"}];// We export the constructed redux store\nexport default createStore(reducer,{tasks:defaultTasks});","map":{"version":3,"sources":["/Users/romanbogdanov/WebstormProjects/story-repo/src/lib/redux.js"],"names":["createStore","actions","ARCHIVE_TASK","PIN_TASK","archiveTask","id","type","pinTask","taskStateReducer","taskState","state","action","tasks","map","task","reducer","defaultTasks","title"],"mappings":"2MAAA;AACA;AACA,OAASA,WAAT,KAA4B,OAA5B,CAEA;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,CACnBC,YAAY,CAAE,cADK,CAEnBC,QAAQ,CAAE,UAFS,CAAhB,CAKP;AACA,MAAO,IAAMC,CAAAA,WAAW,CAAG,SAAAC,EAAE,QAAK,CAAEC,IAAI,CAAEL,OAAO,CAACC,YAAhB,CAA8BG,EAAE,CAAFA,EAA9B,CAAL,CAAtB,CACP,MAAO,IAAME,CAAAA,OAAO,CAAG,SAAAF,EAAE,QAAK,CAAEC,IAAI,CAAEL,OAAO,CAACE,QAAhB,CAA0BE,EAAE,CAAFA,EAA1B,CAAL,CAAlB,CAEP;AACA,QAASG,CAAAA,gBAAT,CAA0BC,SAA1B,CAAqC,CACjC,MAAO,UAACC,KAAD,CAAQC,MAAR,CAAmB,CACtB,wBACOD,KADP,EAEIE,KAAK,CAAEF,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgB,SAAAC,IAAI,QACvBA,CAAAA,IAAI,CAACT,EAAL,GAAYM,MAAM,CAACN,EAAnB,kBAA6BS,IAA7B,EAAmCJ,KAAK,CAAED,SAA1C,GAAwDK,IADjC,CAApB,CAFX,EAMH,CACJ,CAED;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,SAACL,KAAD,CAAQC,MAAR,CAAmB,CACtC,OAAQA,MAAM,CAACL,IAAf,EACI,IAAKL,CAAAA,OAAO,CAACC,YAAb,CACI,MAAOM,CAAAA,gBAAgB,CAAC,eAAD,CAAhB,CAAkCE,KAAlC,CAAyCC,MAAzC,CAAP,CACJ,IAAKV,CAAAA,OAAO,CAACE,QAAb,CACI,MAAOK,CAAAA,gBAAgB,CAAC,aAAD,CAAhB,CAAgCE,KAAhC,CAAuCC,MAAvC,CAAP,CACJ,QACI,MAAOD,CAAAA,KAAP,CANR,CAQH,CATM,CAWP;AACA;AACA,GAAMM,CAAAA,YAAY,CAAG,CACjB,CAAEX,EAAE,CAAE,GAAN,CAAWY,KAAK,CAAE,WAAlB,CAA+BP,KAAK,CAAE,YAAtC,CADiB,CAEjB,CAAEL,EAAE,CAAE,GAAN,CAAWY,KAAK,CAAE,gBAAlB,CAAoCP,KAAK,CAAE,YAA3C,CAFiB,CAGjB,CAAEL,EAAE,CAAE,GAAN,CAAWY,KAAK,CAAE,gBAAlB,CAAoCP,KAAK,CAAE,YAA3C,CAHiB,CAIjB,CAAEL,EAAE,CAAE,GAAN,CAAWY,KAAK,CAAE,iBAAlB,CAAqCP,KAAK,CAAE,YAA5C,CAJiB,CAArB,CAOA;AACA,cAAeV,CAAAA,WAAW,CAACe,OAAD,CAAU,CAAEH,KAAK,CAAEI,YAAT,CAAV,CAA1B","sourcesContent":["// A simple redux store/actions/reducer implementation.\n// A true app would be more complex and separated into different files.\nimport { createStore } from 'redux';\n\n// The actions are the \"names\" of the changes that can happen to the store\nexport const actions = {\n    ARCHIVE_TASK: 'ARCHIVE_TASK',\n    PIN_TASK: 'PIN_TASK',\n};\n\n// The action creators bundle actions with the data required to execute them\nexport const archiveTask = id => ({ type: actions.ARCHIVE_TASK, id });\nexport const pinTask = id => ({ type: actions.PIN_TASK, id });\n\n// All our reducers simply change the state of a single task.\nfunction taskStateReducer(taskState) {\n    return (state, action) => {\n        return {\n            ...state,\n            tasks: state.tasks.map(task =>\n                task.id === action.id ? { ...task, state: taskState } : task\n            ),\n        };\n    };\n}\n\n// The reducer describes how the contents of the store change for each action\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case actions.ARCHIVE_TASK:\n            return taskStateReducer('TASK_ARCHIVED')(state, action);\n        case actions.PIN_TASK:\n            return taskStateReducer('TASK_PINNED')(state, action);\n        default:\n            return state;\n    }\n};\n\n// The initial state of our store when the app loads.\n// Usually you would fetch this from a server\nconst defaultTasks = [\n    { id: '1', title: 'Something', state: 'TASK_INBOX' },\n    { id: '2', title: 'Something more', state: 'TASK_INBOX' },\n    { id: '3', title: 'Something else', state: 'TASK_INBOX' },\n    { id: '4', title: 'Something again', state: 'TASK_INBOX' },\n];\n\n// We export the constructed redux store\nexport default createStore(reducer, { tasks: defaultTasks });\n"]},"metadata":{},"sourceType":"module"}